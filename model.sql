--select * from google_sheets.covid19_indonesia_ashish_kumar
--USE Interview_DB;
--select * from PLAYGROUND_Ashish_kumar;
-- Create Schema for data modelling

USE Interview_DB;

CREATE SCHEMA IF NOT EXISTS PLAYGROUND_ashish_kumar;

USE Interview_DB.PLAYGROUND_ashish_kumar;




USE Interview_DB.PLAYGROUND_ashish_kumar;

CREATE TRANSIENT TABLE IF NOT EXISTS model AS SELECT 
    LOCATION_LEVEL,
    LOCATION,
    COALESCE(PROVINCE, 'No Province') AS PROVINCE,
    COUNTRY,
    COALESCE(ISLAND,'No Island') AS ISLAND,
    LOCATION_ISO_CODE,
    DATE,
    TOTAL_RECOVERED, 
    TOTAL_CASES_PER_MILLION, 
    TOTAL_RURAL_VILLAGES,
    TOTAL_REGENCIES,
    GROWTH_FACTOR_OF_NEW_DEATHS,
    TOTAL_ACTIVE_CASES,
    NEW_CASES_PER_MILLION,
    POPULATION_DENSITY,
    POPULATION,
    NEW_DEATHS_PER_MILLION,
    NEW_RECOVERED,
    NEW_DEATHS,
    TOTAL_CITIES,
    TOTAL_DISTRICTS,
    NEW_CASES,
    TOTAL_DEATHS,
    CASE_RECOVERED_RATE,
    NEW_ACTIVE_CASES,
    TOTAL_CASES,
    TOTAL_URBAN_VILLAGES,
    TOTAL_DEATHS_PER_MILLION,
    GROWTH_FACTOR_OF_NEW_CASES,
    AREA_KM_2_
FROM FIVETRAN_INTERVIEW_DB.GOOGLE_SHEETS.COVID_19_INDONESIA_ashish_kumar
ORDER BY DATE DESC;

-- Create tables specific to a information, data by date and measures

CREATE TRANSIENT TABLE IF NOT EXISTS COVID_DATA AS 
SELECT
    LOCATION,
    LOCATION_ISO_CODE,
    DATE,
    COALESCE(NEW_RECOVERED,0) AS NEW_RECOVERED,
    COALESCE(TOTAL_RECOVERED,0) AS TOTAL_RECOVERED,
    COALESCE(NEW_ACTIVE_CASES,0) AS NEW_ACTIVE_CASES,
    COALESCE(TOTAL_ACTIVE_CASES,0) AS TOTAL_ACTIVE_CASES,
    COALESCE(NEW_DEATHS,0) AS NEW_DEATHS,
    COALESCE(TOTAL_DEATHS,0) AS TOTAL_DEATHS,
    COALESCE(TOTAL_CASES,0) AS TOTAL_CASES,
    COALESCE(GROWTH_FACTOR_OF_NEW_DEATHS, 0.00) AS GROWTH_FACTOR_OF_NEW_DEATHS,
    COALESCE(NEW_CASES_PER_MILLION, 0.00) AS NEW_CASES_PER_MILLION,
    COALESCE(NEW_DEATHS_PER_MILLION, 0.00) AS NEW_DEATHS_PER_MILLION,
    COALESCE(CASE_RECOVERED_RATE, 0.00) AS CASE_RECOVERED_RATE,
    COALESCE(TOTAL_DEATHS_PER_MILLION, 0.00) AS TOTAL_DEATHS_PER_MILLION,
    COALESCE(GROWTH_FACTOR_OF_NEW_CASES, 0.00) AS GROWTH_FACTOR_OF_NEW_CASES
FROM model;

CREATE TRANSIENT TABLE IF NOT EXISTS LOCATION_INFO AS 
SELECT
    LOCATION,
    LOCATION_ISO_CODE,
    COALESCE(TOTAL_URBAN_VILLAGES, 0) AS TOTAL_URBAN_VILLAGES,
    COALESCE(TOTAL_CITIES, 0) AS TOTAL_CITIES,
    TOTAL_DISTRICTS,
    POPULATION_DENSITY,
    POPULATION,
    AREA_KM_2_
FROM(SELECT
          LOCATION,
          LOCATION_ISO_CODE,
          TOTAL_URBAN_VILLAGES,
          TOTAL_CITIES,
          TOTAL_DISTRICTS,
          POPULATION_DENSITY,
          POPULATION,
          AREA_KM_2_,
          COUNT(*) AS col
      FROM model
      GROUP BY     
          LOCATION,
          LOCATION_ISO_CODE,
          TOTAL_URBAN_VILLAGES,
          TOTAL_CITIES,
          TOTAL_DISTRICTS,
          POPULATION_DENSITY,
          POPULATION,
          AREA_KM_2_) AS temp;



SELECT 
    LOCATION,
    LOCATION_ISO_CODE,
    MAX(NEW_RECOVERED) AS MAX_NEW_RECOVERED,
    MAX(TOTAL_RECOVERED) AS MAX_TOTAL_RECOVERED,
    MAX(NEW_ACTIVE_CASES) AS MAX_NEW_ACTIVE_CASES,
    MAX(TOTAL_ACTIVE_CASES) AS MAX_TOTAL_ACTIVE_CASES,
    MAX(NEW_DEATHS) AS MAX_NEW_DEATHS,
    MAX(TOTAL_DEATHS) AS MAX_TOTAL_DEATHS,
    MAX(TOTAL_CASES) AS MAX_TOTAL_CASES,
    MAX(GROWTH_FACTOR_OF_NEW_CASES) AS MAX_GROWTH_FACTOR_OF_NEW_CASES,
    MAX(TOTAL_DEATHS_PER_MILLION) AS MAX_TOTAL_DEATHS_PER_MILLION,
    MAX(GROWTH_FACTOR_OF_NEW_DEATHS) AS MAX_GROWTH_FACTOR_OF_NEW_DEATHS,
    MAX(NEW_CASES_PER_MILLION) AS MAX_NEW_CASES_PER_MILLION,
    MAX(NEW_DEATHS_PER_MILLION) AS MAX_NEW_DEATHS_PER_MILLION,
    MAX(CASE_RECOVERED_RATE) AS MAX_CASE_RECOVERED_RATE
FROM COVID_DATA
GROUP BY 
    LOCATION,
    LOCATION_ISO_CODE;




